// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: greeting.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Greet {
  public static partial class GreetingService
  {
    static readonly string __ServiceName = "greet.GreetingService";

    static readonly grpc::Marshaller<global::Greet.GreetingRequest> __Marshaller_greet_GreetingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.GreetingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Greet.GreetingResponse> __Marshaller_greet_GreetingResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.GreetingResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Greet.GreetingManyTimesRequest> __Marshaller_greet_GreetingManyTimesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.GreetingManyTimesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Greet.GreetingManyTimesResponse> __Marshaller_greet_GreetingManyTimesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.GreetingManyTimesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Greet.GreetingLongRequest> __Marshaller_greet_GreetingLongRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.GreetingLongRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Greet.GreetingLongResponse> __Marshaller_greet_GreetingLongResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.GreetingLongResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Greet.GreetingEveryoneRequest> __Marshaller_greet_GreetingEveryoneRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.GreetingEveryoneRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Greet.GreetingEveryoneResponse> __Marshaller_greet_GreetingEveryoneResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Greet.GreetingEveryoneResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Greet.GreetingRequest, global::Greet.GreetingResponse> __Method_GreetFunc = new grpc::Method<global::Greet.GreetingRequest, global::Greet.GreetingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GreetFunc",
        __Marshaller_greet_GreetingRequest,
        __Marshaller_greet_GreetingResponse);

    static readonly grpc::Method<global::Greet.GreetingManyTimesRequest, global::Greet.GreetingManyTimesResponse> __Method_GreetManyTimes = new grpc::Method<global::Greet.GreetingManyTimesRequest, global::Greet.GreetingManyTimesResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GreetManyTimes",
        __Marshaller_greet_GreetingManyTimesRequest,
        __Marshaller_greet_GreetingManyTimesResponse);

    static readonly grpc::Method<global::Greet.GreetingLongRequest, global::Greet.GreetingLongResponse> __Method_GreetLong = new grpc::Method<global::Greet.GreetingLongRequest, global::Greet.GreetingLongResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "GreetLong",
        __Marshaller_greet_GreetingLongRequest,
        __Marshaller_greet_GreetingLongResponse);

    static readonly grpc::Method<global::Greet.GreetingEveryoneRequest, global::Greet.GreetingEveryoneResponse> __Method_GreetEveryone = new grpc::Method<global::Greet.GreetingEveryoneRequest, global::Greet.GreetingEveryoneResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "GreetEveryone",
        __Marshaller_greet_GreetingEveryoneRequest,
        __Marshaller_greet_GreetingEveryoneResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Greet.GreetingReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GreetingService</summary>
    [grpc::BindServiceMethod(typeof(GreetingService), "BindService")]
    public abstract partial class GreetingServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Greet.GreetingResponse> GreetFunc(global::Greet.GreetingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GreetManyTimes(global::Greet.GreetingManyTimesRequest request, grpc::IServerStreamWriter<global::Greet.GreetingManyTimesResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Greet.GreetingLongResponse> GreetLong(grpc::IAsyncStreamReader<global::Greet.GreetingLongRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GreetEveryone(grpc::IAsyncStreamReader<global::Greet.GreetingEveryoneRequest> requestStream, grpc::IServerStreamWriter<global::Greet.GreetingEveryoneResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GreetingService</summary>
    public partial class GreetingServiceClient : grpc::ClientBase<GreetingServiceClient>
    {
      /// <summary>Creates a new client for GreetingService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GreetingServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GreetingService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GreetingServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GreetingServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GreetingServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Greet.GreetingResponse GreetFunc(global::Greet.GreetingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GreetFunc(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Greet.GreetingResponse GreetFunc(global::Greet.GreetingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GreetFunc, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Greet.GreetingResponse> GreetFuncAsync(global::Greet.GreetingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GreetFuncAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Greet.GreetingResponse> GreetFuncAsync(global::Greet.GreetingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GreetFunc, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Greet.GreetingManyTimesResponse> GreetManyTimes(global::Greet.GreetingManyTimesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GreetManyTimes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Greet.GreetingManyTimesResponse> GreetManyTimes(global::Greet.GreetingManyTimesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GreetManyTimes, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Greet.GreetingLongRequest, global::Greet.GreetingLongResponse> GreetLong(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GreetLong(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Greet.GreetingLongRequest, global::Greet.GreetingLongResponse> GreetLong(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_GreetLong, null, options);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Greet.GreetingEveryoneRequest, global::Greet.GreetingEveryoneResponse> GreetEveryone(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GreetEveryone(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Greet.GreetingEveryoneRequest, global::Greet.GreetingEveryoneResponse> GreetEveryone(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_GreetEveryone, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GreetingServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GreetingServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GreetingServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GreetFunc, serviceImpl.GreetFunc)
          .AddMethod(__Method_GreetManyTimes, serviceImpl.GreetManyTimes)
          .AddMethod(__Method_GreetLong, serviceImpl.GreetLong)
          .AddMethod(__Method_GreetEveryone, serviceImpl.GreetEveryone).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GreetingServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GreetFunc, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Greet.GreetingRequest, global::Greet.GreetingResponse>(serviceImpl.GreetFunc));
      serviceBinder.AddMethod(__Method_GreetManyTimes, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Greet.GreetingManyTimesRequest, global::Greet.GreetingManyTimesResponse>(serviceImpl.GreetManyTimes));
      serviceBinder.AddMethod(__Method_GreetLong, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Greet.GreetingLongRequest, global::Greet.GreetingLongResponse>(serviceImpl.GreetLong));
      serviceBinder.AddMethod(__Method_GreetEveryone, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Greet.GreetingEveryoneRequest, global::Greet.GreetingEveryoneResponse>(serviceImpl.GreetEveryone));
    }

  }
}
#endregion
